{"version":3,"sources":["themes/light.tsx","themes/base.tsx","themes/dark.tsx","themes/CustomThemeProvider.tsx","constants/path.tsx","components/common/NavigationBar/NavigationDrawer.tsx","components/common/NavigationBar/SettingsComposition.tsx","components/common/NavigationBar/NavigationBar.tsx","contexts/practice-context.tsx","utils/stringUtils.tsx","services/assessment.tsx","components/AssessmentList/AssessmentList.tsx","utils/arrayUtils.tsx","components/Practice/MarkdownCustom.tsx","components/Practice/QuestionComponent.tsx","components/Practice/ReviewQuestions.tsx","components/Practice/Practice.tsx","components/About/About.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","unstable_createMuiStrictModeTheme","palette","type","themes","light","dark","primary","main","contrastText","secondary","error","red","A400","CustomThemeContext","React","createContext","currentTheme","setTheme","str","console","log","CustomThemeProvider","props","children","localStorage","getItem","useState","themeName","_setThemeName","getTheme","contextValue","name","setItem","Provider","value","HOMEPAGE","ASSESSMENT_LIST","ABOUT","PRACTICE","useStyles","makeStyles","createStyles","toolbar","mixins","navDrawer","breakpoints","up","display","NavigationDrawer","classes","openStatus","handleCloseDrawer","history","useHistory","useContext","handleOnClick","path","push","Drawer","anchor","open","onClose","className","List","Divider","ListItem","button","onClick","ListItemIcon","AddBox","ListItemText","Info","IconButton","edge","event","settingButton","textTransform","SettingsComposition","setOpen","anchorRef","useRef","handleClose","current","contains","target","handleListKeyDown","key","preventDefault","prevOpen","handleSwitchChange","checked","useEffect","focus","Fragment","ref","aria-controls","undefined","aria-haspopup","Settings","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","id","onKeyDown","MenuItem","disableRipple","backgroundColor","Switch","onChange","Typography","tabItems","navDrawerButton","NavigationBar","questionStatus","initTabNumber","window","location","href","includes","selectedTab","setSelectedTab","openNavDrawer","setOpenNavDrawer","trigger","useScrollTrigger","listen","action","pathname","Slide","appear","direction","in","AppBar","Toolbar","variant","flexGrow","Tabs","_","newValue","Tab","label","MenuOpen","trimNewline","toString","replace","getAssessmentInfos","a","fetch","then","response","text","content","result","match","assessmentInfos","split","map","assessmentInfo","title","link","numQuestions","parseInt","assessmentStatus","trim","filter","item","JSON","stringify","alert","Error","catch","e","getAssessment","imagePath","slice","join","partitioned_raw_question_sets","partitionQuestionPaper","length","question_sets","extractQuestionSet","checkQuestionSet","questionSets","questionSet","answer","choice","rawQuestion","questionByLine","question","answerIndex","some","line","idx","stringUtils","choiceAnswerDetail","extractChoiceAnswerDetail","rawAnswer","extractAnswerIdx","choiceDetail","removeAnswer","detail","extractDetail","cleanedLastChoiceDetail","detailMatch","choiceAnswerDetailItem","regMatch","choiceAnswer","bool","i","questionPaper","linkForImage","partitionedQuestions","imageMarkdown","completedImageMarkdown","upperBgDiv","height","width","backgroundRepeat","backgroundAttachment","backgroundSize","justifyContent","minHeight","btmBgDiv","marginTop","assessmentItem","itemListTextSecondary","AssessmentList","assessments","setAssessments","search","filterBy","setFilterBy","filteredAssessmentInfos","toLowerCase","elevation","margin","Link","color","Grid","container","spacing","xs","TextField","placeholder","helperText","InputLabelProps","shrink","marginLeft","fullWidth","FormControl","InputLabel","htmlFor","Select","native","inputProps","aria-label","Container","maxWidth","border","borderRadius","component","assessment","divider","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","inset","ArrowForward","PracticeStateContext","PracticeDispatchContext","initialState","curr_session","practiceReducer","state","questionIdx","selected","selectedIdx","status","SELECTED","a1","a2","superSet","areArraysEqualSets","WRONG","CORRECT","NEUTRAL","PracticeProvider","dispatch","usePracticeDispatch","context","styles","listItem","markdownItem","textAlign","markdownLink","getOptions","overrides","h1","gutterBottom","h2","h3","h4","paragraph","p","rel","li","withStyles","img","code","marginRight","MarkdownCustom","rootRef","document","querySelector","removeAttribute","setAttribute","querySelectorAll","forEach","block","hljs","highlightBlock","options","root","flexWrap","labelroot","overflow","correctChoice","success","wrongChoice","QuestionComponent","selectedValues","setSelectedValues","showAnswer","setShowAnswer","Card","CardContent","RadioGroup","questionNum","choiceItem","labelClass","FormControlLabel","disabled","control","Radio","CardActions","Button","aria-expanded","Check","Collapse","timeout","unmountOnExit","reviewQuestion","fontWeight","textDecoration","cursor","correctResult","wrongResult","neutralResult","grey","resultIndicator","ResultContainer","percentage","ReviewQuestions","useTheme","statePractice","usePracticeState","handleGotoQuestion","getQuestionStatusColor","Results","total","correctCount","wrongCount","neutralCount","correctPercentage","Math","round","wrongPercentage","neutralPercentage","Box","flexDirection","marginBottom","align","justify","alignItems","floatingButton","top","right","bottom","left","position","Practice","useParams","setAssessment","openReview","setOpenReview","dispatchPractice","questionSetRefs","useMemo","reduce","acc","String","createRef","handleTriggerReview","memoQuestions","localAssessmentString","localAssessment","parse","Fab","PlaylistAddCheck","Dialog","aria-labelledby","aria-details","DialogTitle","DialogContent","padding","paddingTop","overflowX","scrollIntoView","behavior","About","aboutDetail","setAboutDetail","GitHub","fontSize","LinkedIn","App","exact","render","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.d5e5f236.chunk.js","sourcesContent":["import { unstable_createMuiStrictModeTheme } from '@material-ui/core/styles'\n\n// Normal or default theme\nconst theme = unstable_createMuiStrictModeTheme({\n  palette: {\n    type: \"light\"\n  },\n})\n\nexport default theme","import light from './light'\nimport dark from './dark'\nimport { Theme } from '@material-ui/core'\n\nconst themes:{[key: string]: Theme} = {\n  light,\n  dark,\n}\n\nexport default function getTheme(theme:string) {\n  return themes[theme]\n}","import { unstable_createMuiStrictModeTheme } from '@material-ui/core/styles'\nimport { red } from '@material-ui/core/colors'\n\n// Dark theme\nconst theme = unstable_createMuiStrictModeTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#26292C',\n      light: 'rgb(81, 91, 95)',\n      dark: 'rgb(26, 35, 39)',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      main: '#FFB74D',\n      light: 'rgb(255, 197, 112)',\n      dark: 'rgb(200, 147, 89)',\n      contrastText: 'rgba(0, 0, 0, 0.87)',\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n})\n\nexport default theme","import React, { useState } from 'react'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport getTheme from './base'\n\ntype Props = {\n  children: React.ReactNode\n}\n\n// eslint-disable-next-line no-unused-vars\nexport const CustomThemeContext = React.createContext(\n  {\n    currentTheme: 'light',\n    setTheme: (str: string) => console.log(\"setTheme function is null\"),\n  },\n)\n\nconst CustomThemeProvider = (props: Props) => {\n  // eslint-disable-next-line react/prop-types\n  const { children } = props\n\n  // Read current theme from localStorage or maybe from an api\n  const currentTheme = localStorage.getItem('appTheme') || 'light'\n\n  // State to hold the selected theme name\n  const [themeName, _setThemeName] = useState(currentTheme)\n\n  // Retrieve the theme object by theme name\n  const theme = getTheme(themeName)\n  // console.log(theme)\n\n  // Wrap _setThemeName to store new theme names in localStorage\n  const setThemeName = (name: string) => {\n    localStorage.setItem('appTheme', name)\n    _setThemeName(name)\n  }\n\n  const contextValue = {\n    currentTheme: themeName,\n    setTheme: setThemeName,\n  }\n\n  return (\n    <CustomThemeContext.Provider value={contextValue}>\n      <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n    </CustomThemeContext.Provider>\n  )\n}\n\nexport default CustomThemeProvider","const HOMEPAGE = \"/react-linkedin-practices\"\n\nconst ASSESSMENT_LIST = `${HOMEPAGE}/assessment-list`\nconst ABOUT = `${HOMEPAGE}/about`\nconst PRACTICE = `${HOMEPAGE}/practice`\n\n\nexport {HOMEPAGE, ASSESSMENT_LIST, ABOUT, PRACTICE}","import { createStyles, Divider, Drawer, IconButton, List, ListItem, ListItemIcon, ListItemText, makeStyles, Theme } from \"@material-ui/core\"\nimport { AddBox, Info, Brightness4 as DarkButton, Brightness7 as LightButton } from \"@material-ui/icons\";\nimport React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CustomThemeContext } from \"../../../themes/CustomThemeProvider\";\nimport * as path from \"../../../constants/path\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        toolbar: theme.mixins.toolbar,\n        navDrawer: {\n            [theme.breakpoints.up(\"md\")]: {   // desktop\n                display: \"none\"\n            }\n        }\n    }),\n);\n\ninterface Props {\n    openStatus: boolean\n    handleCloseDrawer: () => void\n}\n\nconst NavigationDrawer = (props: Props) => {\n    const classes = useStyles()\n    const { openStatus, handleCloseDrawer } = props\n    const history = useHistory();\n    const { currentTheme, setTheme } = useContext(CustomThemeContext)\n\n    const handleOnClick = (path: string) => {\n        handleCloseDrawer();\n        history.push(path);\n    }\n\n    const handleSwitchTheme = (event: React.MouseEvent<EventTarget>) => {\n        setTheme(currentTheme === \"light\" ? \"dark\" : \"light\")\n    }\n\n    // const handleResetButton = (event: React.MouseEvent<EventTarget>) => {\n    // }\n\n    return (\n        <Drawer anchor=\"right\" open={openStatus} onClose={handleCloseDrawer} className={classes.navDrawer}>\n            <div className={classes.toolbar} />\n            <List>\n                <Divider />\n                <ListItem button key=\"assessment\" onClick={() => handleOnClick(path.ASSESSMENT_LIST)}>\n                    <ListItemIcon><AddBox /></ListItemIcon>\n                    <ListItemText primary=\"Assessment List\" />\n                </ListItem>\n                <ListItem button key=\"about-me\" onClick={() => handleOnClick(path.ABOUT)}>\n                    <ListItemIcon><Info /></ListItemIcon>\n                    <ListItemText primary=\"About\" />\n                </ListItem>\n                <Divider />\n                {/* <ListItem key=\"reset-button\" >\n                    <ListItemIcon >\n                        <IconButton edge=\"start\" onClick={handleResetButton}>\n                            <RotateLeftOutlined />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText primary=\"Reset\" />\n                </ListItem> */}\n                <ListItem key=\"switch-theme\" >\n                    <ListItemIcon>\n                        <IconButton edge=\"start\" onClick={handleSwitchTheme}>\n                            {currentTheme === \"light\" ? <LightButton /> : <DarkButton />}\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText primary=\"Dark Theme\" />\n                </ListItem>\n            </List>\n        </Drawer >\n    )\n}\n\nexport default NavigationDrawer;","// REFERENCE: https://material-ui.com/components/menus/#menulist-composition\nimport { ClickAwayListener, createStyles, Grow, IconButton, makeStyles, MenuItem, MenuList, Paper, Popper, Switch, Theme, Typography } from \"@material-ui/core\";\nimport { Settings } from \"@material-ui/icons\";\nimport React, { useContext } from \"react\";\nimport { CustomThemeContext } from \"../../../themes/CustomThemeProvider\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        settingButton: {\n            display: \"none\",\n            textTransform: \"none\",\n            [theme.breakpoints.up(\"md\")]: {   // desktop\n                display: \"flex\"\n            }\n        },\n    }),\n);\n\nconst SettingsComposition = () => {\n    const classes = useStyles();\n    const { currentTheme, setTheme } = useContext(CustomThemeContext)\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef<HTMLButtonElement>(null);\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event: React.MouseEvent<EventTarget>) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    function handleListKeyDown(event: React.KeyboardEvent) {\n        if (event.key === 'Tab') {\n            event.preventDefault();\n            setOpen(false);\n        }\n    }\n\n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n\n    const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const theme = event.target.checked === true ? \"dark\":\"light\"\n        setTheme(theme)\n    }\n\n    // const handleResetButton = (event: React.MouseEvent<EventTarget>) => {\n    //     handleClose(event)\n        \n    // }\n\n    React.useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current!.focus();\n        }\n\n        prevOpen.current = open;\n    }, [open]);\n\n    return (\n        <React.Fragment>\n            <IconButton\n                ref={anchorRef}\n                aria-controls={open ? 'settings-list-grow' : undefined}\n                aria-haspopup=\"true\"\n                onClick={handleToggle}\n                className={classes.settingButton}\n            >\n                <Settings />\n            </IconButton>\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal className={classes.settingButton}>\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList autoFocusItem={open} id=\"settings-list-grow\" onKeyDown={handleListKeyDown}>\n                                    {/* <MenuItem disableRipple style={{ backgroundColor: 'transparent' }}>\n                                        <IconButton onClick={handleResetButton}>\n                                            <RotateLeftOutlined />\n                                        </IconButton>\n                                        <div style={{ flexGrow: 1 }}>\n                                            <Typography align=\"center\">Reset</Typography>\n                                        </div>\n                                    </MenuItem> */}\n                                    <MenuItem disableRipple style={{ backgroundColor: 'transparent' }}>\n                                        <Switch\n                                            checked={currentTheme === \"light\" ? false : true}\n                                            onChange={handleSwitchChange}\n                                            name=\"dark-theme-switch\"\n                                        />\n                                        <Typography>Dark Theme</Typography>\n                                    </MenuItem>\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    )\n}\n\nexport default SettingsComposition;","import React, { useEffect, useState } from 'react'\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Slide from '@material-ui/core/Slide';\nimport Typography from '@material-ui/core/Typography';\nimport { MenuOpen } from \"@material-ui/icons\";\nimport { createStyles, IconButton, makeStyles, Tabs, Tab, Theme } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport NavigationDrawer from './NavigationDrawer';\nimport SettingsComposition from './SettingsComposition';\nimport * as path from \"../../../constants/path\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        tabItems: {\n            display: \"none\",\n            textTransform: \"none\",\n            [theme.breakpoints.up(\"md\")]: {   // desktop\n                display: \"flex\"\n            }\n        },\n        navDrawerButton: {\n            [theme.breakpoints.up(\"md\")]: { // desktop\n                display: \"none\"\n            }\n        }\n    }),\n);\n\n\nfunction NavigationBar() {\n\n    const history = useHistory();\n    const classes = useStyles();\n    const initTabNumber = window.location.href.includes(path.ABOUT) ? 1 : 0\n\n    const [selectedTab, setSelectedTab] = useState<number>(initTabNumber);\n    const [openNavDrawer, setOpenNavDrawer] = useState(false);\n\n\n    const handleChangeTabs = (_: React.ChangeEvent<{}>, newValue: number) => {\n        setSelectedTab(newValue);\n    };\n\n    const toggleNavDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent,) => {\n        if (\n            event.type === 'keydown' &&\n            ((event as React.KeyboardEvent).key === 'Tab' ||\n                (event as React.KeyboardEvent).key === 'Shift')\n        ) {\n            return;\n        }\n        setOpenNavDrawer(open)\n    }\n\n    const trigger = useScrollTrigger();\n\n    useEffect(()=>{\n        history.listen((location, action)=>{    \n            console.log(location.pathname)\n            if(location.pathname.includes('/assessment-list')){\n                setSelectedTab(0)\n            }else if(location.pathname.includes('/about')){\n                setSelectedTab(1)\n            }\n        })\n\n    }, [history])\n\n\n    return (\n        <React.Fragment>\n            <Slide appear={false} direction=\"down\" in={!trigger}>\n                <AppBar>\n                    <Toolbar>\n                        <Typography variant=\"h6\">LinkedIn Practice Assessment</Typography>\n                        <div style={{ flexGrow: 1 }} />\n                        <Tabs value={selectedTab} onChange={handleChangeTabs} className={classes.tabItems}>\n                            <Tab label=\"Assessment List\" onClick={() => history.push(path.ASSESSMENT_LIST)} />\n                            <Tab label=\"About\" onClick={() => history.push(path.ABOUT)} />\n                        </Tabs>\n\n                        <SettingsComposition />\n                        <IconButton className={classes.navDrawerButton} onClick={toggleNavDrawer(true)} ><MenuOpen /></IconButton>\n                        <NavigationDrawer openStatus={openNavDrawer} handleCloseDrawer={() => setOpenNavDrawer(false)} />\n\n\n                    </Toolbar>\n                </AppBar>\n            </Slide>\n        </React.Fragment>\n    );\n}\n\nexport default NavigationBar;","import * as React from 'react'\nimport { QuestionSet } from '../services/assessment'\nimport { areArraysEqualSets } from '../utils/arrayUtils'\n\nexport enum questionStatus {\n    NEUTRAL = \"NEUTRAL\",\n    CORRECT = \"CORRECT\",\n    WRONG = \"WRONG\",\n    SELECTED = \"SELECTED\"\n}\n\ntype Action = { type: \"submitAnswer\", questionIdx: number, selectedIdx: number[] } |\n            { type: \"changePractice\", questionSets: QuestionSet[] } |\n            { type: \"selectChoices\", questionIdx: number, selectedIdx: number[] }\ntype Dispatch = (action: Action) => void\n\ntype State = { questionSets: QuestionSet[], curr_session: { status: string, answer: number[], selected: number[] | null }[] }\n\ntype PracticeProviderProps = { children: React.ReactNode }//assessment:{ assessmentInfo: AssessmentInfo, questionSets: QuestionSet[] }}\n\nconst PracticeStateContext = React.createContext<State | undefined>(undefined)\n\nconst PracticeDispatchContext = React.createContext<Dispatch | undefined>(undefined,)\n\nconst initialState = {\n    questionSets: [],\n    curr_session: []\n}\n\nconst practiceReducer = (state: State, action: Action) => {\n    switch (action.type) {\n\n        case 'selectChoices': {\n            let curr_session = state.curr_session\n            curr_session[action.questionIdx].selected = action.selectedIdx\n            curr_session[action.questionIdx].status = questionStatus.SELECTED\n            return { ...state, curr_session: curr_session}\n        }\n\n        case 'submitAnswer': {\n            let curr_session = state.curr_session\n            let question = curr_session[action.questionIdx]\n            question.selected = action.selectedIdx\n            if(areArraysEqualSets(question.answer, question.selected)){\n                question.status = questionStatus.CORRECT\n            }else{\n                question.status = questionStatus.WRONG\n            }\n            curr_session[action.questionIdx] = question\n            return { ...state, curr_session: curr_session}\n        }\n\n        case 'changePractice': {\n            const curr_session = action.questionSets.map(item => ({ status: questionStatus.NEUTRAL, answer: item.answer, selected: null }))\n\n            return { ...state, questionSets: action.questionSets, curr_session: curr_session }\n        }\n\n        default: {\n\n            throw new Error(`Unhandled action type`); // : ${action.type}`)\n\n        }\n\n    }\n}\n\nconst PracticeProvider = ({ children }: PracticeProviderProps) => {\n    const [state, dispatch] = React.useReducer(practiceReducer, initialState)\n\n    return (\n\n        <PracticeStateContext.Provider value={state}>\n\n            <PracticeDispatchContext.Provider value={dispatch}>\n\n                {children}\n\n            </PracticeDispatchContext.Provider>\n\n        </PracticeStateContext.Provider>\n\n    )\n}\n\nconst usePracticeState = () => {\n\n    const context = React.useContext(PracticeStateContext)\n\n    if (context === undefined) {\n\n        throw new Error('usePracticeState must be used within a PracticeProvider')\n\n    }\n\n    return context\n\n}\n\nconst usePracticeDispatch = () => {\n\n    const context = React.useContext(PracticeDispatchContext)\n\n    if (context === undefined) {\n\n        throw new Error('usePracticeDispatch must be used within a PracticeProvider')\n\n    }\n\n    return context\n\n}\n\n\nexport { PracticeProvider, usePracticeState, usePracticeDispatch };","export const trimNewline = (str:string) => {\n    return str.toString().replace(/^\\n+|\\n+$/g,\"\")\n}","import { stringUtils } from '../utils'\n\nexport interface AssessmentInfo {\n    title?:string;\n    link?: string;\n    numQuestions: number;\n    assessmentStatus?: string;\n}\n\nexport interface QuestionSet {\n    question: string;\n    choice: string[];\n    answer: number[];\n    detail?: string;\n}\n\nexport interface Assessment {\n    assessmentInfo: AssessmentInfo\n    questionSets: Array<QuestionSet>\n}\n\n\nconst getAssessmentInfos = async (): Promise<Array<AssessmentInfo> | undefined> =>{\n    const assessmentsURL = \"https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/README.md\"\n        \n    return fetch(assessmentsURL).then(response => response.text().then(content=>{\n        let result = content.match(/\\| \\[Adobe(.|\\n)*\\|/g)\n        if(result != null){\n            result = result[0].split('\\n')\n            let assessmentInfos = result.map(assessmentInfo => {\n                \n                let title = (assessmentInfo.match(/\\[(.*)\\]/i) || [undefined, undefined])[1];\n                let link = (assessmentInfo.match(/\\[.*\\]\\((.*)\\)/) || [undefined, undefined])[1];\n                let numQuestions = parseInt((assessmentInfo.match(/=>(.*)questions/i) || ['0', '0'])[1]);\n                let assessmentStatus = (assessmentInfo.match(/questions\\s+\\|(.*)\\s+\\|/) || [undefined, undefined])[1]?.trim();\n\n                link = link !== undefined? \"https://raw.githubusercontent.com/Ebazhanov/in-quiz-questions/master/\" + link.replace(/<|>/g,\"\") : undefined\n                \n                return {\"title\":title,\"link\":link, \"numQuestions\":numQuestions,\"assessmentStatus\": assessmentStatus}\n            })\n            \n            assessmentInfos = assessmentInfos.filter(item=> item.title && ['with answers','partially answered'].includes(item.assessmentStatus || \"\"))\n            localStorage.setItem(\"assessmentInfos\", JSON.stringify(assessmentInfos))\n            return assessmentInfos\n        }\n        else{\n            alert(\"Failed to parse list of assessment.\")\n            throw new Error(\"Failed to parse list of assessment.\")\n        }\n    })).catch((e) => undefined)\n}\n\nconst getAssessment = async (assessmentInfo: AssessmentInfo) : Promise<Assessment>  => {\n    if(assessmentInfo.link){\n        let content = await (await fetch(assessmentInfo.link)).text()\n        const imagePath = assessmentInfo.link.split(\"/\").slice(0, -1).join(\"/\")\n\n        let partitioned_raw_question_sets = partitionQuestionPaper(content, imagePath);\n        if(partitioned_raw_question_sets.length === 0){throw new Error(\"Failed to partition question.\")}\n\n        let question_sets = partitioned_raw_question_sets.map(extractQuestionSet).filter(checkQuestionSet)\n        if(question_sets.length === 0){\n            throw new Error(`No question parsed for ${assessmentInfo.title}.`)\n        }else{\n            localStorage.setItem(assessmentInfo.title || \"default_title\", JSON.stringify({assessmentInfo: assessmentInfo, questionSets: question_sets}))\n        }\n        \n        return {assessmentInfo: assessmentInfo, questionSets: question_sets}\n    }else{\n        throw new Error(`Link to Question for ${assessmentInfo.title} not found.`)\n    }\n}\n\nconst checkQuestionSet = (questionSet: QuestionSet) => {\n    return (questionSet.answer.length > 0 && questionSet.choice.length > 3)\n}\n\nconst extractQuestionSet = (rawQuestion: string) : QuestionSet => {\n    \n    let questionByLine = rawQuestion.split(/(?<=\\s{0,1}\\n)/g) || []\n    \n    if(questionByLine.length === 0){throw new Error(\"Failed to break down question\")}\n    let question = \"default question\"\n    let answerIndex = -1\n    questionByLine.some((line, idx)=>{\n        if(line.match(/-\\s{0,1}\\[[x{0,1}|\\s]\\]/i)){\n            question = questionByLine.slice(0,idx).join(\"\")\n            answerIndex = idx\n            return true\n        }else{\n            return false\n        }\n    })\n    question = stringUtils.trimNewline(question)\n    let answer = questionByLine.slice(answerIndex).join(\"\")\n\n    let choiceAnswerDetail = extractChoiceAnswerDetail(answer)\n\n\n    return {question: question, ...choiceAnswerDetail}\n}\n\nconst extractChoiceAnswerDetail = (rawAnswer:string) =>{\n    let choiceAnswerDetail = rawAnswer.trim().split(/(?=-\\s{0,1}\\[[x{0,1}|\\s]\\])/ig)\n    let answer = extractAnswerIdx(choiceAnswerDetail)\n    let choiceDetail = removeAnswer(choiceAnswerDetail)\n    let detail = extractDetail(choiceAnswerDetail)\n    \n    const cleanedLastChoiceDetail = choiceDetail[choiceAnswerDetail.length-1].replace(detail || \"\",\"\")\n    choiceDetail[choiceAnswerDetail.length-1] = cleanedLastChoiceDetail\n    \n    return {\"choice\": choiceDetail, \"answer\": answer, \"detail\": detail}\n}\n\nconst extractDetail = (choiceAnswerDetail: Array<string>) : string | undefined => {\n    choiceAnswerDetail = choiceAnswerDetail.map(stringUtils.trimNewline)\n\n    // Assume Details at last\n    let lastChoiceDetail = choiceAnswerDetail[choiceAnswerDetail.length-1]\n    let detailMatch = lastChoiceDetail.match(/\\n{2,}.*$/g)\n    let detail = detailMatch ? detailMatch[0] : \"\"\n\n    // Assume Details behind `<< Correct`\n    if(detail === \"\"){\n        \n        choiceAnswerDetail.some(choiceAnswerDetailItem=>{\n            const regMatch = choiceAnswerDetailItem.match(/<{2,3}-{0,3}\\s{0,1}CORRECT.*/i)\n            if(regMatch){\n                detail = regMatch[0].replace(/<{2,3}-{0,3}\\s{0,1}CORRECT/i,\"\")\n                return true\n            }else{\n                return false\n            }\n        })\n    }\n\n    return detail !== \"\" ? stringUtils.trimNewline(detail) : undefined\n}\n\nconst extractAnswerIdx = (choiceAnswer: Array<string>) => {\n    // choiceAnswer = choiceAnswer.map(item=>item.replace(/\\[x\\]/i, \"<<--- Correct\"))\n\n    let answer = choiceAnswer.map(item => item.match(/\\[x\\]/i)? true : false)\n    \n    answer = answer.includes(true) === false ? choiceAnswer.map(item => item.match(/<{2,3}-{0,3}\\s{0,1}CORRECT/i)? true : false) : answer\n    \n    return answer.map((bool, i) => bool ? i : -1).filter(i => i !== -1);\n}\n\nconst removeAnswer = (choiceAnswer: Array<string>) => {\n    let choice = choiceAnswer.map(item => item.replace(/-\\s{0,1}\\[[x{0,1}|\\s]\\]/ig, \"\"))\n    choice = choice.map(item=>item.replace(/<{2,3}-{0,3}\\s{0,1}CORRECT.*/ig, \"\"))\n    choice = choice.map(item=>item.replace(/<{2,3}-{0,3}\\s{0,1}WRONG.*/ig, \"\"))\n\n    return choice.map(stringUtils.trimNewline)\n}\n\nconst partitionQuestionPaper = (questionPaper:string, linkForImage:string): Array<string> => {\n    //EXAMPLE: #### Q 14.\n\n    let content = (questionPaper.match(/#{3,5}\\s{0,1}Q{0,1}\\.{0,1}\\s{0,1}\\d+(.|\\n)*/g) || [undefined])[0];\n    if(content){\n        let partitionedQuestions = content.split(/(?=#{3,5}\\s{0,1}Q{0,1}\\.{0,1}\\s{0,1}\\d+\\.{0,1})/g).filter(item=>item.length > 4)\n\n        // IMAGE PATH\n        partitionedQuestions = partitionedQuestions.map(question=>{\n            const imageMarkdown = question.match(/\\[.*]\\(((?!https).*)\\)/)\n            if(imageMarkdown){\n                const completedImageMarkdown = imageMarkdown[0].replace(\"(\",\"(\"+linkForImage+\"/\")\n                question = question.replace(/\\[.*]\\(((?!https).*)\\)/, completedImageMarkdown)\n                return question\n\n            }else{\n                return question\n            }\n        })\n\n        return partitionedQuestions\n\n    } \n    return [];\n}\n\n\nexport { getAssessmentInfos, getAssessment, extractQuestionSet, partitionQuestionPaper, extractChoiceAnswerDetail };\n\n","import { Container, createStyles, Divider, FormControl, Grid, IconButton, InputLabel, Link, List, ListItem, ListItemText, makeStyles, Paper, Select, TextField, Theme, Typography } from \"@material-ui/core\"\nimport { ArrowForward } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AssessmentInfo, getAssessmentInfos } from \"../../services/assessment\";\nimport * as path from \"../../constants/path\"\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        upperBgDiv: {\n            display: \"flex\",\n            height: \"5vh\",\n            width: \"100%\",\n            backgroundColor: theme.palette.secondary.main,\n            backgroundRepeat: \"no-repeat\",\n            backgroundAttachment: \"fixed\",\n            backgroundSize: \"cover\",\n            justifyContent: \"center\",\n            minHeight: \"300px\"\n\n        },\n        btmBgDiv: {\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"center\",\n            minHeight: \"600px\",\n            marginTop: -80\n        },\n        assessmentItem: {\n            height: \"6vh\"\n        },\n        itemListTextSecondary: {\n            display: \"none\",\n            [theme.breakpoints.up(\"md\")]: {   // desktop\n                display: \"flex\"\n            }\n        }\n\n    }),\n);\n\nconst AssessmentList = () => {\n    const classes = useStyles();\n    const history = useHistory();\n    const [assessments, setAssessments] = useState<Array<AssessmentInfo> | undefined>(undefined);\n    const [filterBy, setFilterBy] = useState({search:\"\", assessmentStatus:\"\"})\n\n    useEffect(() => {\n        getAssessmentInfos().then(assessmentInfos => {\n            setAssessments(assessmentInfos)\n        }).catch(e => alert(e))\n    }, [])\n\n    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFilterBy({...filterBy, search: event.target.value})\n        // setFilteredAssessments(assessments?.filter(item => item.title?.toLowerCase().includes(event.target.value)))\n    }\n\n    const handleAssessmentStatusChange = (event: React.ChangeEvent<{ value: string | unknown }>) => {\n        const value = event.target.value || \"\"\n        if(typeof value === \"string\"){\n            setFilterBy({...filterBy, assessmentStatus: event.target.value as string})\n            // setFilteredAssessments(assessments?.filter(item => item.assessmentStatus?.toLowerCase().includes(event.target.value as string)))\n        }\n    }\n\n    const filterAssessmentInfos = () =>{\n        return assessments?.filter(item => item.title?.toLowerCase().includes(filterBy.search) && item.assessmentStatus?.toLowerCase().includes(filterBy.assessmentStatus))\n    }\n\n    const filteredAssessmentInfos = filterAssessmentInfos();\n    \n\n\n    return (\n        <div>\n            <div className={classes.upperBgDiv} />\n            <div className={classes.btmBgDiv}>\n                <Paper elevation={3} style={{ width: \"85vw\" }}>\n                    <div style={{ height: \"2vh\" }} />\n                    <Typography variant=\"h3\" style={{ margin: 16 }}>LinkedIn Assessment Practice List</Typography>\n                    <Typography variant=\"h5\" style={{ margin: 16 }}>\n                        <Link color=\"textSecondary\" href=\"https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes\">\n                            LinkedIn assessment practices from GitHub\n                        </Link>\n                    </Typography>\n                    <Divider />\n                    <Grid container spacing={1}>\n                        <Grid item xs={1} />\n                        <Grid item xs={6}>\n                            <TextField\n\n                                id=\"outlined-full-width\"\n                                label=\"Search\"\n                                placeholder=\"type here...\"\n                                helperText=\"Search Assessment\"\n                                onChange={handleSearchChange}\n                                margin=\"normal\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                style={{ marginLeft: \"1%\" }}\n                                variant=\"outlined\"\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <FormControl variant=\"outlined\" margin=\"normal\" style={{ width: \"90%\" }}>\n                                <InputLabel htmlFor=\"outlined-age-native-simple\">Status</InputLabel>\n                                <Select\n                                    native\n                                    label=\"Status\"\n                                    inputProps={{\n                                        name: 'age',\n                                        id: 'outlined-age-native-simple',\n                                    }}\n                                    onChange={handleAssessmentStatusChange}\n                                >\n                                    <option aria-label=\"None\" value=\"\" />\n                                    <option value=\"with answer\">with answers</option>\n                                    <option value=\"partially answered\">partially answered</option>\n                                    <option value=\"answers required\">answers required</option>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={1} />\n                    </Grid>\n\n                    {filteredAssessmentInfos ? <Container maxWidth=\"sm\" style={{ border: \"1px solid rgb(212, 212, 212)\", borderRadius: 25 }}>\n                        <List component=\"nav\">\n                            {\n                                filteredAssessmentInfos.map((assessment, idx) =>\n                                    <React.Fragment key={assessment.title}>\n                                        <ListItem divider button disableRipple className={classes.assessmentItem}\n                                            style={\n                                                idx === 0 ? { borderTopLeftRadius: 15, borderTopRightRadius: 15 } :\n                                                    idx === filteredAssessmentInfos.length - 1 ? { borderBottomLeftRadius: 15, borderBottomRightRadius: 15 } :\n                                                        { borderRadius: 0 }\n                                            }>\n                                            <ListItemText inset primary={assessment.title} secondary={<span className={classes.itemListTextSecondary}>{`${assessment.numQuestions} questions ${assessment.assessmentStatus}`}</span>}></ListItemText>\n\n                                            <IconButton onClick={()=> history.push(`${path.PRACTICE}/${assessment.title}`)}><ArrowForward /></IconButton>\n                                        </ListItem>\n                                    </React.Fragment>\n                                )\n                            }\n                        </List>\n                    </Container> : null}\n\n\n                </Paper>\n            </div>\n        </div>\n    )\n}\n\nexport default AssessmentList;","/** assumes array elements are primitive types\n* check whether 2 arrays are equal sets.\n* @param  {} a1 is an array\n* @param  {} a2 is an array\n*/\nexport function areArraysEqualSets(a1:any[], a2:any[]) {\n    const superSet:any = {};\n    for (const i of a1) {\n      const e = i + typeof i;\n      superSet[e] = 1;\n    }\n  \n    for (const i of a2) {\n      const e = i + typeof i;\n      if (!superSet[e]) {\n        return false;\n      }\n      superSet[e] = 2;\n    }\n  \n    for (let e in superSet) {\n      if (superSet[e] === 1) {\n        return false;\n      }\n    }\n  \n    return true;\n  }","\nimport React, { useContext, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'markdown-to-jsx';\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport hljs from 'highlight.js';\nimport { CustomThemeContext } from '../../themes/CustomThemeProvider';\n\nconst styles = (theme: Theme) => (\n    createStyles({\n        listItem: {\n            marginTop: theme.spacing(1)\n        },\n        markdownItem: {\n            backgroundColor: \"transparent\",\n            textAlign: \"left\",\n            width:\"100%\"\n        },\n        markdownLink: {\n            color: theme.palette.secondary.dark\n        }\n    })\n);\n\nconst useStyles = makeStyles(styles);\n\nconst getOptions = (classes:any) => {\n\n    return{\n    \n    overrides: {\n        h1: {\n            component: Typography,\n            props: {\n                gutterBottom: true,\n                variant: 'h5',\n            },\n        },\n        h2: { component: Typography, props: { gutterBottom: true, variant: 'h6' } },\n        h3: { component: Typography, props: { gutterBottom: true, variant: 'subtitle1', style:{margin:\"0.35em\"}} },\n        h4: {\n            component: Typography,\n            props: { gutterBottom: true, variant: 'caption', paragraph: true },\n        },\n        p: { component: Typography, props: { paragraph: true, style:{margin:\"0.35em\"} } },\n        a: { component: Link, props:{className: classes.markdownLink ,rel:\"noopener noreferrer\", target:\"_blank\"}},\n        li: {\n            component: withStyles(styles)(({ classes, ...props }: { classes: any }) => (\n                <li className={classes.listItem}>\n                    <Typography component=\"span\" {...props} />\n                </li>\n            )), \n        },\n        img:{\n            props:{ style:{maxWidth:\"100%\"}}\n        },\n        code:{\n            props:{ style:{marginRight:\"1vw\"}}\n        }\n    },\n}}\n\nexport default function MarkdownCustom(props: any) {\n    const classes = useStyles();\n    const rootRef = useRef<HTMLDivElement>(null);\n    const { currentTheme } = useContext(CustomThemeContext)\n\n    useEffect(() => {\n        if (currentTheme === \"light\") {\n            document?.querySelector(`link[title=\"light\"]`)?.removeAttribute(\"disabled\");\n            document?.querySelector(`link[title=\"dark\"]`)?.setAttribute(\"disabled\", \"disabled\");\n        } else {\n            document?.querySelector(`link[title=\"dark\"]`)?.removeAttribute(\"disabled\");\n            document?.querySelector(`link[title=\"light\"]`)?.setAttribute(\"disabled\", \"disabled\");\n        }\n\n        rootRef?.current?.querySelectorAll('pre code').forEach((block) => {\n            hljs.highlightBlock(block as HTMLElement);\n        });\n\n    }, [rootRef, currentTheme]);\n\n    return <div className={classes.markdownItem} ref={rootRef} ><ReactMarkdown options={getOptions(classes)} {...props} /></div>;\n}","import { Button, Card, CardActions, CardContent, Collapse, createStyles, FormControl, FormControlLabel, makeStyles, Radio, RadioGroup, Theme } from \"@material-ui/core\";\nimport { Check } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport { usePracticeDispatch } from \"../../contexts/practice-context\";\nimport { QuestionSet } from \"../../services/assessment\";\nimport MarkdownCustom from \"./MarkdownCustom\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\",\n            flexWrap: \"nowrap\"\n        },\n        labelroot: {\n            margin: 2,\n            marginRight: 0\n        },\n        label: {\n            overflow: \"auto\",\n            marginRight: 0,\n            width: \"100%\"\n        },\n        correctChoice: {\n            backgroundColor: theme.palette.success.main,\n            borderRadius: 20\n        },\n        wrongChoice: {\n            backgroundColor: theme.palette.error.main,\n            borderRadius: 20\n        }\n    }),\n);\n\ninterface Props {\n    questionNum: number\n    questionSet: QuestionSet\n}\n\nconst QuestionComponent = (props: Props) => {\n    const classes = useStyles();\n    const { questionSet } = props;\n    const [selectedValues, setSelectedValues] = useState<number[]>([])\n    const [showAnswer, setShowAnswer] = useState(false)\n    const dispatch = usePracticeDispatch();\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const selectedIdx = parseInt((event.target as HTMLInputElement).value)\n        setSelectedValues([selectedIdx]);\n        dispatch({type: 'selectChoices', questionIdx: props.questionNum, selectedIdx:selectedValues})\n    };\n    const handleShowAnswer = () => {\n        setShowAnswer(true);\n        dispatch({type: 'submitAnswer', questionIdx: props.questionNum, selectedIdx:selectedValues})\n    };\n\n\n    return (\n        <Card variant=\"outlined\">\n            <CardContent>\n                <MarkdownCustom>{questionSet.question}</MarkdownCustom>\n                <FormControl classes={{ root: classes.root }} component=\"fieldset\">\n                    <RadioGroup classes={{ root: classes.root }} aria-label=\"choice\" name=\"choices\" value={selectedValues.length > 0 ? selectedValues[0]:null} onChange={handleChange}>\n                        {questionSet.choice.map((choiceItem, idx) => {\n                            let labelClass = {}\n                            if (showAnswer) {\n                                if (selectedValues.includes(idx) && !questionSet.answer.includes(idx)) {\n                                    labelClass = { className: classes.wrongChoice }\n                                } else if (questionSet.answer.includes(idx)) {\n                                    labelClass = { className: classes.correctChoice }\n                                }\n                            }\n                            return <FormControlLabel {...labelClass} disabled={showAnswer} classes={{ root: classes.labelroot, label: classes.label }} key={idx} value={idx}\n                                control={<Radio />}\n                                label={\n                                    <MarkdownCustom>{choiceItem}</MarkdownCustom>\n                                } />\n                        })}\n                    </RadioGroup>\n                </FormControl>\n            </CardContent>\n            <CardActions>\n                <Button disabled={showAnswer} variant=\"outlined\" onClick={handleShowAnswer} aria-expanded={showAnswer} aria-label=\"show answer.\">\n                    <Check /><span style={{ marginLeft: 5 }}>Check Answer</span>\n                </Button>\n            </CardActions>\n            <Collapse in={showAnswer} timeout=\"auto\" unmountOnExit>\n                {questionSet.detail ? <CardContent>\n                    <MarkdownCustom>{questionSet.detail}</MarkdownCustom>\n                </CardContent> : null}\n            </Collapse>\n        </Card>\n    )\n}\n\nexport default QuestionComponent;","import { Box, createStyles, Grid, makeStyles, Theme, Typography, useTheme } from \"@material-ui/core\";\nimport React from \"react\";\nimport { questionStatus, usePracticeState } from \"../../contexts/practice-context\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        reviewQuestion: {\n            fontWeight: \"bolder\",\n            \"&:hover\": {\n                textDecoration: \"underline\",\n                cursor: \"pointer\"\n            }\n        },\n        correctResult: {\n            height: 10,\n            backgroundColor: theme.palette.success.main\n        },\n        wrongResult: {\n            height: 10,\n            backgroundColor: theme.palette.error.main\n        },\n        neutralResult: {\n            height: 10,\n            backgroundColor: theme.palette.grey[500]\n        },\n        resultIndicator: {\n            display: \"block\",\n            width: \"100%\",\n            textAlign: \"center\"\n        }\n    }),\n);\n\ninterface Props {\n    handleGotoQuestion: (id: string) => void\n}\n\ninterface ResultContainerProps {\n    percentage: number,\n    className: string\n}\n\nconst ResultContainer = (props: ResultContainerProps) => {\n    const classes = useStyles();\n    return (\n        <div style={{ width: `${props.percentage}%` }}>\n            <div className={props.className} />\n            <span className={classes.resultIndicator}>{`${props.percentage}%`}</span>\n        </div>\n    )\n}\n\nconst ReviewQuestions = (props: Props) => {\n    const theme = useTheme();\n    const classes = useStyles();\n    const statePractice = usePracticeState();\n    const { handleGotoQuestion } = props;\n\n    const getQuestionStatusColor = (status: string) => {\n        switch (status) {\n            case questionStatus.CORRECT: {\n                return theme.palette.success.main\n            }\n            case questionStatus.WRONG: {\n                return theme.palette.error.main\n            }\n            default: {\n                return theme.palette.text.primary\n            }\n        }\n    }\n\n\n\n    const Results = () => {\n        const total = statePractice.curr_session.length;\n        const correctCount = statePractice.curr_session.filter(item => item.status === questionStatus.CORRECT).length;\n        const wrongCount = statePractice.curr_session.filter(item => item.status === questionStatus.WRONG).length;\n        const neutralCount = statePractice.curr_session.filter(item => item.status === questionStatus.NEUTRAL).length;\n        const correctPercentage = Math.round(correctCount / total * 100)\n        const wrongPercentage = Math.round(wrongCount / total * 100)\n        const neutralPercentage = Math.round(neutralCount / total * 100)\n\n        return (\n            <>\n                <Box flexDirection=\"row\" marginBottom={5}>\n\n                    <Typography variant=\"body1\" display=\"block\">{`Correct: ${correctCount}`}</Typography>\n                    <Typography variant=\"body1\" display=\"block\">{`Neutral: ${neutralCount}`}</Typography>\n                    <Typography variant=\"body1\" display=\"block\">{`Wrong: ${wrongCount}`}</Typography>\n                </Box>\n\n                <Typography variant=\"caption\" align=\"center\">Result Bar</Typography>\n                <div style={{ marginBottom: 20, display: \"flex\" }}>\n                    <ResultContainer percentage={correctPercentage} className={classes.correctResult} />\n                    <ResultContainer percentage={neutralPercentage} className={classes.neutralResult} />\n                    <ResultContainer percentage={wrongPercentage} className={classes.wrongResult} />\n                    {/* <div style={{width:`${neutralPercentage}%`}}><div className={classes.neutralResult}/><span className={classes.resultIndicator}>70%</span></div>\n                <div style={{width:`${wrongPercentage}%`}}><div className={classes.wrongResult}/><span className={classes.resultIndicator}>70%</span></div> */}\n                </div>\n            </>\n        )\n    }\n\n\n\n    return (\n        <>\n            <Results />\n            <Grid container spacing={5} justify=\"center\" alignItems=\"flex-start\">\n                {statePractice.curr_session.map((item, idx) => {\n                    return (\n                        <Grid key={idx} item xs={1}>\n                            <Typography\n                                className={classes.reviewQuestion}\n                                style={\n                                    {\n                                        color: getQuestionStatusColor(item.status)\n                                    }\n                                }\n                                variant=\"button\"\n                                onClick={() => { handleGotoQuestion(`question-${idx}`) }}\n                            >\n                                {idx + 1}\n                            </Typography>\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </>\n\n    )\n}\n\nexport default ReviewQuestions;","import { Container, createStyles, Dialog, DialogContent, DialogTitle, Fab, List, ListItem, makeStyles, Theme } from \"@material-ui/core\";\nimport { PlaylistAddCheck } from \"@material-ui/icons\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { usePracticeDispatch } from \"../../contexts/practice-context\";\nimport { Assessment, getAssessment, getAssessmentInfos } from \"../../services/assessment\";\n\nimport QuestionComponent from \"./QuestionComponent\";\nimport ReviewQuestions from \"./ReviewQuestions\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        floatingButton: {\n            margin: 0,\n            top: 'auto',\n            right: 20,\n            bottom: 20,\n            left: 'auto',\n            position: 'fixed',\n        }\n    }),\n);\n\nconst Practice = () => {\n    const classes = useStyles();\n    const { title } = useParams<{ title: string }>();\n    const [assessment, setAssessment] = useState<Assessment>()\n    const [openReview, setOpenReview] = useState(false);\n    const dispatchPractice = usePracticeDispatch();\n    const questionSetRefs = useMemo(() => {\n        return assessment?.questionSets.reduce((acc: { [key: string]: React.RefObject<HTMLLIElement> }, value, idx) => {\n            acc[\"question-\" + String(idx)] = React.createRef();\n            return acc;\n        }, {}) || {};\n    }, [assessment?.questionSets])\n\n    const handleTriggerReview = () => {\n        setOpenReview(!openReview)\n    }\n\n    const handleGotoQuestion = (id: string) => {\n        questionSetRefs[id].current?.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n\n        })\n        setOpenReview(!openReview)\n    };\n\n    const memoQuestions = useMemo(() => {\n        return <List>\n            {assessment?.questionSets.map((questionSet, idx) =>\n                <ListItem key={idx} style={{ display: \"block\" }} ref={questionSetRefs[\"question-\" + String(idx)]}>\n                    <QuestionComponent questionNum={idx} questionSet={questionSet}></QuestionComponent>\n                </ListItem>)}\n        </List>\n    }, [assessment?.questionSets, questionSetRefs])\n\n\n\n\n\n\n    useEffect(() => {\n        const localAssessmentString = localStorage.getItem(title)\n\n        if (localAssessmentString) {\n            const localAssessment = JSON.parse(localAssessmentString) as Assessment\n            setAssessment(localAssessment)\n            dispatchPractice({ type: \"changePractice\", questionSets: localAssessment?.questionSets || [] })\n            console.log(\"available in local storage\")\n        } else {\n            console.log(\"not available in local storage\")\n            getAssessmentInfos().then(assessmentInfos => {\n                const assessmentInfo = assessmentInfos?.filter(assessmentInfo => assessmentInfo.title === title)[0]\n                if (assessmentInfo) {\n                    getAssessment(assessmentInfo).then(assessment => {\n                        setAssessment(assessment)\n                        dispatchPractice({ type: \"changePractice\", questionSets: assessment.questionSets })\n                    })\n                }\n                else {\n                    alert(\"Fail to retrieve assessment\")\n                }\n            })\n        }\n\n\n    }, [title, dispatchPractice])\n\n    return (\n        <>\n            <Container style={{ marginTop: \"74px\" }}>\n                {assessment ? memoQuestions : <p>LOADING</p>}\n            </Container>\n            <Fab variant=\"extended\" onClick={handleTriggerReview} className={classes.floatingButton} color=\"secondary\" aria-label=\"submit or check\">\n                <PlaylistAddCheck />Review\n                </Fab>\n            <Dialog\n                open={openReview}\n                aria-labelledby=\"qna-review-title\"\n                aria-details=\"qna-review-details\"\n                onClose={handleTriggerReview}\n                style={{ width: \"90vw\", height: \"90vh\" }}\n            >\n                <DialogTitle id=\"qna-review-title\">\n                    Questions and Answers Review\n                </DialogTitle>\n                <DialogContent style={{ padding: 50, paddingTop:0 , overflowX: \"hidden\" }}>\n                    <ReviewQuestions handleGotoQuestion={handleGotoQuestion} />\n                </DialogContent>\n            </Dialog>\n        </>\n    )\n}\n\nexport default Practice","import { Box, Button, Card, CardActions, CardContent, Container, Link, Typography } from \"@material-ui/core\";\nimport { GitHub, LinkedIn } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport MarkdownCustom from \"../Practice/MarkdownCustom\";\n\n\nconst About = () => {\n    const [aboutDetail, setAboutDetail] = useState<string>()\n\n    useEffect(() => {\n        fetch('https://raw.githubusercontent.com/wkm97/react-linkedin-practices/master/USEFUL_REFERENCE.md').then(response => {\n            response.text().then(\n                content => setAboutDetail(content)\n            )\n        })\n    }, [])\n\n    return (\n        <Container style={{ marginTop: 84 }}>\n            <Card style={{ margin: 20 }}>\n                <CardContent>\n                    <Typography align=\"left\" variant=\"h5\">Data Source:</Typography>\n                    <Typography align=\"left\" variant=\"body1\">\n                        <Link\n                            color=\"textSecondary\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            href=\"https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes\"\n                        >\n                            Linkedin Quiz Answers, Skill Assessments Test - Collected by Ebazhanov and Collaborators.\n                    </Link>\n                    </Typography>\n\n                </CardContent>\n            </Card>\n\n            <Card style={{ margin: 20 }}>\n                <CardContent>\n                    <Box display=\"flex\">\n                        <Typography variant=\"h5\">Project Repository:</Typography>\n                        <div style={{flexGrow:1}}/>\n                        <Button variant=\"outlined\" onClick={() => window.open(\"https://github.com/wkm97/react-linkedin-practices/issues\", \"_blank\")}>\n                            Report Issues\n                        </Button>\n                    </Box>\n\n                    <Typography align=\"left\" variant=\"body1\">\n                        <Link\n                            color=\"textSecondary\"\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            href=\"https://github.com/wkm97/react-linkedin-practices\"\n                        >\n                        React LinkedIn Practices - Created by wkm97\n                    </Link>\n                    </Typography>\n\n                </CardContent>\n                <CardActions>\n                    <div style={{ flexGrow: 1 }} />\n                    <Button\n                        onClick={() => window.open(\"https://github.com/wkm97/\", \"_blank\")}\n                    >\n                        <GitHub fontSize=\"large\" />\n                    </Button>\n                    <Button\n                        onClick={() => window.open(\"https://www.linkedin.com/in/wkm97/\", \"_blank\")}\n                    >\n                        <LinkedIn fontSize=\"large\" />\n                    </Button>\n\n                </CardActions>\n            </Card>\n\n            <Card style={{ margin: 20 }}>\n                <CardContent>\n                    {aboutDetail ? <MarkdownCustom align=\"left\">{aboutDetail}</MarkdownCustom> : <div />}\n                </CardContent>\n            </Card>\n        </Container>\n    )\n}\n\nexport default About;","import React from 'react';\n\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { NavigationBar } from '../common';\nimport AssessmentList from \"../AssessmentList/AssessmentList\";\nimport Practice from \"../Practice/Practice\";\nimport { PracticeProvider } from '../../contexts/practice-context';\nimport About from '../About/About';\nimport * as path from \"../../constants/path\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavigationBar />\n        <Switch>\n          <Route exact path={path.HOMEPAGE} render={\n            () => <Redirect to={path.ASSESSMENT_LIST} />\n          } />\n          <Route exact path={path.ASSESSMENT_LIST}>\n            <AssessmentList />\n          </Route>\n          <Route path={`${path.PRACTICE}/:title`}>\n            <PracticeProvider>\n              <Practice />\n            </PracticeProvider>\n          </Route>\n          <Route exact path={path.ABOUT}>\n            <About/>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components';\nimport reportWebVitals from './reportWebVitals';\nimport CustomThemeProvider from './themes/CustomThemeProvider'\nimport { CssBaseline } from '@material-ui/core';\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <CustomThemeProvider>\n      <CssBaseline />\n      <App />\n    </CustomThemeProvider>\n  // </React.StrictMode>,\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}